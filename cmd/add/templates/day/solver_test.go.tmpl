package day{{.Day}}

import (
	"github.com/taskat/aoc/cmd/main/config"
	"github.com/taskat/aoc/internal/years/{{.Year}}/days"
	"testing"

	"github.com/stretchr/testify/assert"
)

var (
	// result stores the result of the solver
	// this is used to prevent the compiler from optimizing the code
	result any
)
{{ $day := .Day }}{{range $part := .Parts}}
// Test_Day_{{$day}}_Part{{$part}} tests the day {{$day}} solver for part {{$part}}
func Test_Day_{{$day}}_Part{{$part}}(t *testing.T) {
	testCases := []struct {
		name          string
		input         config.InputType
		expectedValue string
		hyperParams   []any
	}{
		{"Test 1", config.TestInput(1), "", nil},
		{"Real", config.RealInput{}, "", nil},
	}
	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			cfg := config.NewConfig(days.Year, day, 1, tc.input, tc.hyperParams...)
			solver := &Solver{}
			solver.AddHyperParams(tc.hyperParams...)
			solver.ParsePart{{$part}}(cfg.ReadInputFile())
			solution := solver.SolvePart{{$part}}()
			assert.Equal(t, tc.expectedValue, solution)
		})
	}
}

// Benchmark_Day_{{$day}}_Part{{$part}} benchmarks the day {{$day}} solver for part {{$part}}
func Benchmark_Day_{{$day}}_Part{{$part}}(b *testing.B) {
	cfg := config.NewConfig(days.Year, day, 1, config.RealInput{}, nil)
	solver := &Solver{}
	solver.AddHyperParams(cfg.GetHyperParams()...)
	solver.ParsePart{{$part}}(cfg.ReadInputFile())
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		result = solver.SolvePart{{$part}}()
	}
}
{{end}}
