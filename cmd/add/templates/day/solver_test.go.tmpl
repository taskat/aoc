package day{{.Day}}

import (
	"taskat/aoc/cmd/main/config"
	"taskat/aoc/internal/years/{{.Year}}/days"
	"testing"

	"github.com/stretchr/testify/assert"
)

var (
	// result stores the result of the solver
	// this is used to prevent the compiler from optimizing the code
	result any
)

{{define "testPart"}}
// Test_Day_{{.Day}}_Part1 tests the day {{.Day}} solver for part 1
func Test_Day_{{.Day}}_Part1(t *testing.T) {
	testCases := []struct {
		name          string
		input         config.InputType
		expectedValue string
		hyperParams   []any
	}{
		{"Test 1", config.TestInput(1), "", nil},
		{"Real", config.RealInput{}, "", nil},
	}
	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			cfg := config.NewConfig(days.Year, day, 1, tc.input, tc.hyperParams...)
			solver := &Solver{}
			solver.AddHyperParams(tc.hyperParams...)
			solver.ParsePart1(cfg.ReadInputFile())
			solution := solver.SolvePart1()
			assert.Equal(t, tc.expectedValue, solution)
		})
	}
}

// Benchmark_Day_{{.Day}}_Part1 benchmarks the day {{.Day}} solver for part 1
func Benchmark_Day_{{.Day}}_Part1(b *testing.B) {
	cfg := config.NewConfig(days.Year, day, 1, config.RealInput{}, nil)
	solver := &Solver{}
	solver.AddHyperParams(cfg.GetHyperParams()...)
	solver.ParsePart1(cfg.ReadInputFile())
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		result = solver.SolvePart1()
	}
}
{{end}}

{{range .Parts}}
{{template "testPart" (dict "Day" .Day "Part" .)}}
{{end}}
